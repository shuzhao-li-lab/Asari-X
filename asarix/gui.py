"""
This implements a very basic GUI that is autogenerated from the 
PARAMETERS in default_parameters.py. The GUI uses tkinter
which should be supported on most platforms. 

Experimental!!!
"""

import tkinter as tk
from tkinter import filedialog, messagebox

from asarix.default_parameters import PARAMETERS
import asarix.main as main

def select_directory(root, params):
    """
    This will instantiate a directory selection window. 

    Args:
        root (tk root): the root for the tk instance
        params (dict): Asari-X params dict

    Returns:
        dict: Asari-X params dict
    """
    directory = filedialog.askdirectory(title="Select Input Directory", parent=root)
    params['input']['value'] = directory
    return params

def parameter_selection(parent, params):
    """
    This creates the parameter selection UI from the Parameters. 

    Args:
        parent (tk root): the tk root to draw in
        params (dict): Asari-X PARAMETERS dict 

    Returns:
        dict: Asari-X param dict templated from PARAMETERS
    """

    result = {}
    def run_callback():
        nonlocal result
        output = {}
        for key, widget in widgets.items():
            if types[key] is bool:
                output[key] = widget.get()
            else:
                val = widget.get()
                if types[key] is int:
                    try:
                        output[key] = int(val)
                    except ValueError:
                        messagebox.showerror("Error", f"Invalid integer for {key}", parent=parent)
                        return
                elif types[key] is float:
                    try:
                        output[key] = float(val)
                    except ValueError:
                        messagebox.showerror("Error", f"Invalid float for {key}", parent=parent)
                        return
                else:
                    output[key] = val
        result = output
        parent.destroy()

    canvas = tk.Canvas(parent)
    vsb = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
    canvas.configure(yscrollcommand=vsb.set)
    vsb.pack(side="right", fill="y")
    canvas.pack(side="left", fill="both", expand=True)

    frame = tk.Frame(canvas)
    canvas.create_window((0, 0), window=frame, anchor="nw")
    frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

    widgets = {}
    types = {}
    row = 0
    for key, value in params.items():
        try:
            tk.Label(frame, text=key).grid(row=row, column=0, padx=5, pady=2, sticky="w")
            to_display = value.get('value', value.get('default'))
            if value["types"][0] is bool:
                var = tk.BooleanVar(value=to_display)
                tk.Checkbutton(frame, variable=var).grid(row=row, column=1, padx=5, pady=2, sticky="w")
                widgets[key] = var
                types[key] = bool
            elif value["types"][0] in (int, float):
                entry = tk.Entry(frame)
                entry.insert(0, str(to_display))
                entry.grid(row=row, column=1, padx=5, pady=2, sticky="w")
                widgets[key] = entry
                types[key] = type(to_display)
            else:
                entry = tk.Entry(frame)
                entry.insert(0, "NONE" if to_display is None else str(to_display))
                entry.grid(row=row, column=1, padx=5, pady=2, sticky="w")
                widgets[key] = entry
                types[key] = str
            row += 1
        except:
            pass

    tk.Button(parent, text="Continue", command=run_callback).pack(side="bottom", pady=10)
    parent.wait_window(parent)

    for k, v in result.items():
        if v == "NONE":
            result[k] = None
    return result

def subcommand_selection(parent, params):
    """
    This window allows the user to select which subcommand to run in Asari-X

    Args:
        parent (tk root): tk root to draw window in
        params (dict): Asari-X params dict
    """

    def set_value(value):
        params['run'] = value
        parent.destroy()

    for option in main.main({}, dry_run=True):
        tk.Button(parent, text=option, command=lambda opt=option: set_value(opt)).pack(pady=2)
    parent.wait_window(parent)
    return params

def gui_main(params):
    """
    This is the main GUI function. It will step the user through 
    selecting an input directory and configuring the params. 

    Then the user will select what command to run. 

    Args:
        params (dict): Asari-X params dict
    """
    root = tk.Tk()
    root.withdraw()

    params = select_directory(root, params)

    param_win = tk.Toplevel(root)
    param_win.title("Edit Parameters")
    params = parameter_selection(param_win, params)

    sub_win = tk.Toplevel(root)
    sub_win.title("Select an Option")
    params = subcommand_selection(sub_win, params)
    root.destroy()
    main.main(params)

if __name__ == '__main__':
    gui_main(PARAMETERS)
